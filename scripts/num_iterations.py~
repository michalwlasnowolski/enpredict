from seq_cutter import SeqCutter
from kmers import Kmers
from predict import Predict
from classification_human import Classification
from read_data import ReadData
from spoil import Mutation
import pickle


sequences=[i.strip() for i in open('chrom_4_cut.seq')]
print sequences[-1]
#print type(sequences)

my_sequences=[]

for i in sequences:
    #print sequences[i]
    #print sequences[i][0][0]
    #if sequences[i][0][0]=='>':
    #print sequences[i][0][0]
    #print sequences[i][0]
       
    
    if i[0]!='>':
        #print 'yes'
        my_sequences.append(i)
#print sequences
#print my_sequences


def num_iteration(my_sequences):

    cutter=SeqCutter()
    count_kmers=Kmers()
    mutation=Mutation()
    predict=Predict()
    classifier = pickle.load(open('/home/enpredict/lemonade/static/enpredict/classifiers/fly_4mers_100'))

    results=open('number_iteration_highest.txt', 'w')
    start_prediction_num_mutations=[]

    for i in xrange(len(my_sequences)):

        sequence=cutter.make_string(my_sequences[i])
        #print sequence
        reference_result=mutation.prediction(cutter, count_kmers, predict, sequence, classifier, 'fly')
        if reference_result>=0.81:
            all_the_lowest, all_positions_nucleo=mutation.best_mutation(0, 200, sequence, cutter, count_kmers, predict, 'fly')



            original_prediction=all_the_lowest[0][0]


            len_mutations=len(all_positions_nucleo)
            #start_prediction_num_mutations.append([original_prediction, len_mutations])
            line='%s\t%s\n' % (original_prediction, len_mutations)
            print line
            results.write(line)
            #print start_prediction_num_mutations  
    

num_iteration(my_sequences)
