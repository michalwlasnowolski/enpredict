import sys
from Bio import Seq
# coding: utf-8
from collections import Counter
class Kmers():

    def complement(self, x):
        if x == 'A': return 'T'
        elif x == 'C': return 'G'
        elif x == 'G': return 'C'
        elif x == 'T': return 'A'
        else:
            return x

    def is_compl(self, x, y):
        if len(x) != len(y):
            return False
        for i in xrange(len(x)):
            if self.complement(x[i]) != y[-i-1]:
                return False
        return True

    def get_compl(self, x):
        y = ''
        for a in x:
            y = self.complement(a) + y
        return y


    def gen_all(self, k):
        d = ['']
        alph = ['A', 'C', 'G', 'T']
        for i in xrange(k):
            new_d = []
            for s in d:
                for a in alph:
                    new_d.append(s+a)
            d = new_d
        final = []
        for seq in d:
            to_add=True
            for seq2 in final:
                if self.is_compl(seq, seq2):
                    to_add = False
                    break
            if to_add:
                final.append(seq)
        #print final
        return final

    def all_kmers(self, k=4):
        s=[""]
        for i in range(k):
            s2=[]
            for i in s:
                for a in "ACGT":
                    s2.append(i+a)
            s=s2
        return s

    def rc_kmers(self, kmers):
        res={}
        keys=[]
        for s in kmers:
            if Seq.reverse_complement(s) in keys:
                res[s]=Seq.reverse_complement(s)
            else:
                keys.append(s)
                res[s]=s
        print keys
        #keys=sorted(keys)
        #print keys
        return keys,res

    def count_vec(self, s, dic, keys):
        
        d = Counter([dic[s[i:i+4]] for i in range(len(s)-3)])

        return [d[k] for k in keys]


    def count_kmers(self, input_seq, k, frame_len, step):

        keys1 = self.gen_all(k)

        output=''
        enhancers_file=input_seq.split('\n')
        
        #enhancers_file=enhancers_seq[:-1]
        #print enhancers_seq

        enh_lenght=len(enhancers_file)
        for i in xrange(enh_lenght):

            id_seq=''
            sequence=''


            sequence=enhancers_file[i]
            #print sequence
            sequence_len=len(sequence)

            keys,dic=self.rc_kmers(self.all_kmers(4))
            kmers_new=self.count_vec(sequence,dic,keys)
            #print kmers_new
            for seq, i in zip(keys, kmers_new):
                print seq, float(i)/float(len(sequence))



            kmers = dict.fromkeys(keys, 0)
            #print kmers

            for i in xrange(0, sequence_len - k):


                s = str(sequence[i:(i+k)].upper())
                if kmers.has_key(s):
                    kmers[s]+=1
                elif kmers.has_key(self.get_compl(s)):
                    kmers[self.get_compl(s)] += 1
                else:
                    print id_seq, s
            if sequence_len == 0:
                print "no sequence for ", id_seq
            else:
                for key in keys1:
                    
                    output+=("%s %f\t" % (key, float(kmers[key])/sequence_len))
            output+='\n'
        print output
        return output


seq='AAGGAAGAAATTCCAAGGTTTTGCATATGATAATATTAAAATAATAGAGCTTTAAGAAGTTCAGCATGCTGGGTTATAATGTCAAGTAATTCGCAGCCAAATCAATCAATTTCTTAAAAGTCTAGGCATAAGAACATTAACTCTTTTTCTAAGGTTTTTAACTATATTTTTTCGTTGTTCTTTTAAGCCACCATTTTTATAAGGAAGAAATTCCAAGGTTTTGCATATGATAATATTAAAATAATAGAGCTTTAAGAAGTTCAGCATGCTGGGTTATAATGTCAAGTAATTCGCAGCCAAATCAATCAATTTCTTAAAAGTCTAGGCATAAGAACATTAACTCTTTTTCTAAGGTTTTTAACTATATTTTTTCGTTGTTCTTTTAAGCCACCATTTTTAT'
kmers=Kmers()
a=kmers.count_kmers(seq, 4, 200, 100)
#print a


